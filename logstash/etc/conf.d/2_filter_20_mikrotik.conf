    if "mikrotik" in [tags] {
	
	#Si el missatge ve buit l'eliminem
	if [message] =~ /^$/ {
            drop {}
        }

	#Maquetegem tots els guions - a guins baixos _  
        mutate {
            strip => ["message"]
            gsub => [
                "message", "-", "_",
                "message", "_([0-9])", "-\1"
            ]
 	}
	
	##Fem un split de tots els camps de la sequencia mikrotik [message]
        ## https://www.elastic.co/guide/en/logstash/current/plugins-filters-kv.html
        kv {
        }

	#En el cas de que la sequencia sigui network, frequency o logs passem de llarg
	if [type] == "frequency" {
           drop {}
        }else if [type] == "logs" {
	   drop {}
	}else if [type] == "network" {
	   drop {}
	}  

        #Sequencia station
        # "message" => "type=station channel=\"2462/20/gn\" bitrate=7.8kbps active=yes \r\n   address=F8:8E:85:0D:B0:67 network-ssid=\"JAZZTEL_B067\" signal-to-noise=21dB \r\n   ssid-source=beacon use-of-freq=0.8% use-of-traffic=25.3% \r\n   freq-source=network-on-freq signal-strength=-86dB \r\n   network-source=forms-network",
        if [type] == "station" {
        
	    if [network_source] == "forms_network" {
		drop {}
	    } else if [network_source] == "seen_successful_assoc" {
		drop {}
	    } else if [network_source] == "seen_successful_auth" {
		drop {}
	    }

            grok {
                break_on_match => false         
                match => { "channel" => "(?<channel_frequency_int>[^\/]+)" }
                match => { "signal_strength" => "(?<signal_strength_int>[^dB]+)"   }
                match => { "signal_to_noise" => "(?<signal_to_noise_int>[^dB]+)"   }
            }        


	    mutate {
         	remove_field => "message"
		remove_field => "channel"
		remove_field => "signal_strength"
		remove_field => "signal_to_noise"
		remove_field => "host"
		remove_field => "use_of_freq"
		remove_field => "use_of_traffic"
		remove_field => "network_ssid"
		remove_field => "ssid_source"
		remove_field => "active"
		remove_field => "bitrate"        
	    }


            mutate {
                rename => {
                    "address" => "mac_address"
                }
                convert => {
                     "signal_strength_int" => "integer"
                     "signal_to_noise_int" => "integer"
                     "channel_frequency_int" => "integer"
                }
            }
 
        }
   
        # Network type:
        # "message" => "type=network channel=\"2412/20/gn\" bitrate=13.2kbps active=no \r\n   frequency-known=yes beacon-seen=yes address=E4:8D:8C:C1:D8:51 \r\n   network-ssid=\"Free Emagina\" last-beacon=13s770ms beacon-strength=-23dBm \r\n   signal-to-noise=75dB ssid-source=beacon network-station-count=3 \r\n   use-of-freq=2.7% use-of-traffic=51.5%", 
       ## if [type] == "network" {
	    #drop{}
         ##   grok {
           ##     break_on_match => false         
             ##   match => { "channel" => "(?<channel_frequency_int>[^\/]+)" }
               ## match => { "beacon_strength" => "(?<signal_strength_int>[^dB]+)"   }
               ## match => { "signal_to_noise" => "(?<signal_to_noise_int>[^dB]+)"   }
            ##}

           ## mutate {
             ##   add_field => {
               ##     "last_beacon_int" => "%{last_beacon}"
                ##}
               ## rename => {
                 ##   "address" => "mac_address"
               ## }
           ## }

            ##mutate {
              ##  gsub => [  "last_beacon_int", "[sm]", ""  ]
           ## }
           ## mutate {
             ##   convert => {
               ##     "signal_strength_int" => "integer"
                 ##   "signal_to_noise_int" => "integer"
                  ##  "channel_frequency_int" => "integer"
                   ## "last_beacon_int" => "integer"
               ## }
           ## }
    
    ##   }


        ## Device Id and Date parsing..
        ## 2016dec10_10_03_00_43CE02FDBC7D.txt
        ## "path": "/opt/ftp_import/2016dec10_09_51_00_43CE02FDBC7D.txt"
        grok {
            match => {
                "path" => "\/(?:[^\/]+\/)+(?<timestamp>%{YEAR}%{MONTH1}%{MONTHDAY}_%{HOUR}_%{MINUTE}_%{SECOND})_(?<device_id>[^\.]+)[.]txt"
            }
        }

	mutate {
	   remove_field => "path"
	}

        if "_grokparsefailure" not  in [tags] {
            date {
                match => [ "timestamp", "YYYYMMMdd_HH_mm_ss" ]
                timezone => "CET"
            }
        }

}
