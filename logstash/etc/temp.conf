input {
    
    stdin {
        codec => json {}
    }
    
}
filter {

##confirmed
        mutate {
            strip => ["message"]
            gsub => [
                "message", "-", "_",
                "message", "_([0-9])", "-\1"
            ]
        }

        ## https://www.elastic.co/guide/en/logstash/current/plugins-filters-kv.html
        kv {
        }

        ## Network type:
        ## "message" => "type=network channel=\"2412/20/gn\" bitrate=13.2kbps active=no \r\n   frequency-known=yes beacon-seen=yes address=E4:8D:8C:C1:D8:51 \r\n   network-ssid=\"Free Emagina\" last-beacon=13s770ms beacon-strength=-23dBm \r\n   signal-to-noise=75dB ssid-source=beacon network-station-count=3 \r\n   use-of-freq=2.7% use-of-traffic=51.5%", 
        if [type] == "network" {

            grok {
                break_on_match => false         
                match => { "channel" => "(?<channel_frequency_int>[^\/]+)" }
                match => { "beacon_strength" => "(?<signal_strength_int>[^dB]+)"   }
                match => { "signal_to_noise" => "(?<signal_to_noise_int>[^dB]+)"   }
            }


## Confirmed
            mutate {
                add_field => {
                    "last_beacon_int" => "%{last_beacon}"
                }
                rename => {
                    "address" => "mac_address"
                }
            }

            mutate {
                gsub => [  "last_beacon_int", "[sm]", ""  ]
            }
            mutate {
                convert => {
                    "signal_strength_int" => "integer"
                    "signal_to_noise_int" => "integer"
                    "channel_frequency_int" => "integer"
                    "last_beacon_int" => "integer"
                }
            }
    
        }

        ## Device Id and Date parsing..
        ## 2016dec10_10_03_00_43CE02FDBC7D.txt
        ## "path": "/opt/ftp_import/2016dec10_09_51_00_43CE02FDBC7D.txt"
        grok {
            match => {
                "path" => "\/(?:[^\/]+\/)+(?<timestamp>%{YEAR}%{MONTH1}%{MONTHDAY}_%{HOUR}_%{MINUTE}_%{SECOND})_(?<device_id>[^\.]+)[.]txt"
            }
        }

        if "_grokparsefailure" not  in [tags] {
            date {
                match => [ "timestamp", "YYYYMMMdd_HH_mm_ss" ]
            }
        }

    if [channel_frequency_int]  and [signal_strength_int] {
        
        ruby {
            code => "freq = event.get('channel_frequency_int')
                     strength = event.get('signal_strength_int')
                     distance =  10 ** ((  27.55 - ( 20 * Math.log10(freq) ) + strength.abs )/20)
                     event.set('distance', distance)"
        }
    }

## confirmed
    if [mac_address] {
        oui  {
            source =>  "mac_address"
        }
    }
   
}
output {

    stdout {
        codec => rubydebug {}
    }

}
